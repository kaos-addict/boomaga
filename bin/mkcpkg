#!/bin/bash
# Create new kcp package repo and basics files TODO: recognize url?
# Use like: mkpkg <sourcesurl>
#           mkpkg <appname>
#
# Where <sourceurl> is a github repo address or a source tarball
# And <appname> is just the name of an app you would like to create a pkg for
#
# It will: 
# _If repo not existing: 
#           Create a new repo for appname in KCP, using initgithub
#           download and/or create basic commented files in ./appname folder.
# _If repo exists:
#           Clone existing KCP repo and open files & proto files for editing 

#### VARIABLES: ####
repo_name=""
input="$1"
g_raw="https://raw.githubusercontent.com"
rc_file="/home/$USER/.config/mkcpkgrc"
Org=KaOS-Community-Packages
#### /VARIABLES: ####

#### Functions ####
# Simple exit with error message
_errorexit() {
        kdialog --error "$1"
        exit $2
}

# Detect valid url
isurl() {
if [ -n "$(echo ${1} | grep "http://\|https://\|git@" )" ];then
    echo yes && exit 0
else echo no && exit 1
fi
}

# Get working directory
Get_work_dir() {
    work_dir="$(kdialog --getexistingdirectory "/home/$USER/kcp" 2>>/dev/null)"
    echo "Work_dir=${work_dir}" > ${rc_file} 
    source ${rc_file}
    kdialog --warningcontinuecancel "Your KCP contributions folder is: \"${Work_dir}\".\nClick cancel to select another one."
    if [ $? != 0 ];then
        echo "Work_dir=''" >${rc_file}
        Work_dir=""
    fi
}

get_repo() {
    if [ -d ${Work_dir}/${repo_name} ];then
        cd ${Work_dir}/${repo_name}/ && git pull && $XEDITOR -n README.md PKGBUILD 2>>/dev/null&& return 0
    else git clone ${repo_url} && cd ${repo_name} && $XEDITOR -n README.md PKGBUILD 2>>/dev/null && return 0
    fi
    return 1
}

git_init() {
bash -x /usr/local/bin/initgithub "${input}"
if [ "$?" = "0" ];then 

# Want empty or commented?
            kdialog --yesno "Do you want commented example files? (Best for first uses)"
    case $? in
        0) _com=""
            c="c"
        ;;
        *) _com=".commented"
            c=""
        ;;
    esac
            
# Get PKGBUILD proto file (hopefully pckcp takes care of this for us:)
    rm PKGBUILD
    pckcp -g${c} && sed -i "s/PKGNAME/${input}/g" PKGBUILD
            
# Get README proto file
    wget ${g_raw}/kaos-addict/kaos-helpers/master/README.md${_com}.kaos.proto -O README.md
    sed -i "s/# PKGNAME/# ${input}/g" README.md
    ${XEDITOR} -n README.md PKGBUILD & disown 2>>/dev/null
    return 0
elif [ "$?" = "123" ];then
    kdialog --msgbox "Repository ${repo_name} at https://github.com/${Org}/${repo_name} created.\nFeel free now to commit and then push your working folder: '${Work_dir}/${repo_name}'."
    return 0
else return 1
fi
}

#### /Functions ####

#### Main Script ####
#  If you already have a folder containing your KCP contributions you can configure it in ~/.config/mkcpkgrc
[ -f ${rc_file} ] && source ${rc_file}

# Get working directory or ask for it:
while [ -z "${Work_dir}" ]
do
    kdialog --warningcontinuecancel "KCP contib folder not set.\nPlease select your KCP contributions folder..." || exit 1
    Get_work_dir
done

# If no default XEDITOR then use kate
[ -z "$XEDITOR" ] && XEDITOR=$(which kate || _errorexit "Can't find either kate nor XEDITOR variable...\nYou can add it in your bashrc as: \"export XEDITOR=/usr/bin/yourtexteditor\" ...\nExiting" 1)

# Ask for usual working folder or a new one
kdialog --warningyesno "Your KCP contribution folder is set to: \"${Work_dir}\".\nSelect \"Choose\" if you want to change it..." --yes-label "Choose" --no-label "Yes"
if [ "$?" = "0" ];then
    Work_dir=""
    Get_work_dir
fi

# Arg given
if [ -n "${input}" ];then

# Is input an Url
    if [ "$(isurl \"${input}\")" = "yes" ];then
#        _errorexit "${input} is Url...\This is not yet implemented... Exiting..." 1

# Supports github repo as input
        if [ -n "$(echo "${input}" | grep "git@github.com:${Org}/")" ];then

# Url is ssh
# Extract repo_name from url
            repo_name=`basename "$(echo ${input} | cut -d '/' -f 2)" .git`
            repo_url=${input}
            get_repo
            
# Url is https
        elif [ -n "$(echo ${input} | grep "https://github.com/${Org}" )" ];then
        
# Extract repo_name from url
            repo_name=`basename $(echo ${input} | sed "s#https://github.com/${Org}/##") .git`
            get_repo || _errorexit "Unable to clone and edit given repo, is a folder named '${repo_name}' existing?" 1
        else _errorexit "Url detected but...\nNon-github repositories are not (yet) supported..." 1
        fi
    fi

# Arg is not an url, create new empty repo
    if [ -d "${Work_dir}/${input}" ];then
        kdialog --warningyesnocancel "Folder exists, should we delete or pull repo to ${input} folder?" --no-label "Delete" --cancel-label "Exit" --yes-label "Pull"
        case $? in
            0) curl -s --head https://github.com/${Org}/${input} | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null && cd ${Work_dir}/${input} && git pull && kdialog --msgbox "Repository successfully pulled in: '${Work_dir}/${input}'." && exit 0 || ${_error} "Repository does not exist... Renaming folder..."
            mv ${Work_dir}/${input} ${Work_dir}/${input}.old
                git_init
        ;;
            1) rm -rf ${Work_dir}/${input}
                git_init
        ;;
            *) exit 1
        ;;
        esac
    else git_init
    fi
# Arg not detected
else kdialog --error "Unable to evaluate argument or no valid argument given."
        exit 1
fi
exit 0
